
(defpoll TODO :interval "1s" "cat ~/.notes/todo.md | fold -w 40")
;; System vars
(defpoll BLIGHT :interval "1s" "scripts/bright")
(defpoll VOLUME :interval "1s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll MIC :interval "1s" "amixer -D pulse sget Capture | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")

;; Workspaces vars
(defpoll WORKSPACE :interval "0.1s" "scripts/workspace")


;; Action
(defpoll SCREENSAVER :interval "0.1s" "scripts/screensaver --status")
(defpoll BLUETOOTH :interval "0.1s" "scripts/bluetooth --status")
(defpoll BLUETOOTH_ICON :interval "0.1s" "scripts/bluetooth --icon")
(defpoll VPN :interval "0.1s" "scripts/vpn --status")
(defpoll KL :interval "0.1s" "scripts/keyboard_layout")
(defpoll WLAN_ESSID :interval "1s" "scripts/wifi --ESSID")
(defpoll WLAN_ICON :interval "1s" "scripts/wifi --ICON")
(defpoll DNS :interval "1s" "scripts/dns --status")
(defpoll IP :interval "4s" "scripts/ip")
(defpoll LOCAL_IP :interval "2s" "scripts/ip --local")

;; Netstat
(defpoll INTERFACE :interval "2s" "scripts/ip --interface")



;; Time vars
(defpoll HOUR :interval "1s" "date +\'%H\'")
(defpoll MIN :interval "1s" "date +\'%M\'")
(defpoll DAY :interval "1s" "date +\'%A\'")
(defpoll DATE :interval "1s" "date '+%m/%d'")

;; Uptime vars
(defpoll UPHOUR :interval "5s" "uptime -p | awk '{print $2 \" \" $3}' | sed 's/,//g'")
(defpoll UPMIN :interval "5s" "uptime -p | awk '{print $4 \" \" $5}'")

;; Music vars
(defpoll SONG :interval "1s" "scripts/music_info --song")
(defpoll ARTIST :interval "1s" "scripts/music_info --artist")
(defpoll STATUS :interval "0.3s" "scripts/music_info --status")
(defpoll CURRENT :interval "1s" "scripts/music_info --time")
(defpoll COVER :interval "1s" "scripts/music_info --cover")
(defpoll CTIME :interval "1s" "scripts/music_info --ctime")
(defpoll TTIME :interval "1s" "scripts/music_info --ttime")

;; Weather vars
(defpoll ICON :interval "1s" "scripts/weather_info --icon")
(defpoll STAT :interval "1s" "scripts/weather_info --stat")
(defpoll TEMP :interval "1s" "scripts/weather_info --temp")
(defpoll CITY :interval "1s" "scripts/weather_info --city")

;; Mail vars
(defpoll MAILS :interval "1s" "cat ~/.cache/eww/mail")


;; Mail Distro
(defpoll PACKAGES :interval "10s" "pacman -Q | wc -l")
(defpoll DISTRO :interval "1h" "awk '/^PRETTY_NAME=/' /etc/*-release | awk -F'=' '{ print $2 }' | tr -d '\"'")
(defpoll KERNEL :interval "10s" "uname -r")
(defpoll HYPRLAND :interval "10s" "scripts/hyprland_version")

;; Files vars
(defpoll FREE :interval "5s" "df -h / | awk '{print $4}' | tail -n 1 | sed 's/G/ GB/'")


;; ** Widgets *************************************************************************

;; background
(defwidget background []
  (box :class "bg")
)

;; todo
(defwidget todo []
  (box :class "genwin" :orientation "v" :spacing 35 :space-evenly "false" :vexpand "false" :hexpand "false"
    (button :class "todo-icon" :timeout "5s" :onclick "scripts/todo && ~/.config/eww/launch" "")
    (label :class "todo" :halign "start" :wrap "true" :limit-width 200 :text TODO)))

;; system
(defwidget system []
  (box :class "genwin" :vexpand "false" :hexpand "false"
    (box :orientation "v" :spacing 35 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
      (box :class {EWW_BATTERY.total_avg >= 80 ? "g-bar" : (EWW_BATTERY.total_avg >= 20 && EWW_BATTERY.total_avg < 80) ? "y-bar" : EWW_BATTERY.total_avg < 20 ? "r-bar" : "default-bar" } :orientation "h" :spacing 30 :space-evenly "false" :vexpand "false" :hexpand "false"
        (label :class "iconbat" :text "")
        (scale :min 0 :max 100 :value {EWW_BATTERY.total_avg} :active "false"))
      (box :class {EWW_CPU.avg >= 80 ? "r-bar" : (EWW_CPU.avg >= 40 && EWW_CPU.avg < 80) ? "y-bar" : EWW_CPU.avg < 40 ? "g-bar" : "default-bar" } :orientation "h" :spacing 30 :space-evenly "false" :vexpand "false" :hexpand "false"
        (label :class "iconcpu" :text "")
        (scale :min 0 :max 100 :value {EWW_CPU.avg} :active "false"))
      (box :class {EWW_RAM.used_mem_perc >= 80 ? "r-bar" : (EWW_RAM.used_mem_perc >= 40 && EWW_RAM.used_mem_perc < 80) ? "y-bar" : EWW_RAM.used_mem_perc < 40 ? "g-bar" : "default-bar" } :orientation "h" :spacing 30 :space-evenly "false" :vexpand "false" :hexpand "false"
        (label :class "iconmem" :text "")
        (scale :min 0 :max 100 :value {EWW_RAM.used_mem_perc} :active "false"))
      (box :class "default-bar" :orientation "h" :spacing 30 :space-evenly "false" :vexpand "false" :hexpand "false"
        (label :class "iconbright" :text "󰃠")
        (scale :min 1 :max 100 :value {BLIGHT} :onchange "brightnessctl set {}%"))
      (box :class "default-bar" :orientation "h" :spacing 30 :space-evenly "false" :vexpand "false" :hexpand "false"
        (label :class "iconvol" :text "")
        (scale :min 0 :max 100 :value {VOLUME} :onchange "amixer -D pulse sset Master {}%"))
      (box :class "default-bar" :orientation "h" :spacing 30 :space-evenly "false" :vexpand "false" :hexpand "false"
        (label :class "iconmic" :text "")
        (scale :min 0 :max 100 :value {MIC} :onchange "amixer -D pulse sset Capture {}%")))))

;; clock
(defwidget clock []
  (box :class "genwin" :orientation "h" :spacing 50 :space-evenly false :vexpand "false" :hexpand "false"
    (box :orientation "h" :spacing 0
      (label :class "time_hour" :valign "start" :wrap "true" :limit-width 25 :text HOUR)
      (label :class "time_min" :valign "end" :wrap "true" :limit-width 25 :text MIN))
    (box :orientation "v" :spacing 0
      (label :class "time_date" :valign "end" :halign "end" :wrap "true" :limit-width 25 :text DATE)
      (label :class "time_day" :valign "end" :halign "end" :wrap "true" :limit-width 25 :text DAY))))

;; uptime
(defwidget uptime []
  (box :class "genwin"
    (box :orientation "h" :halign "center" :spacing 40 :space-evenly "false" :vexpand "false" :hexpand "false"
      (label :class "icontimer" :valign "center" :text "󱦟")
      (box :orientation "v" :valign "center" :spacing 0 :space-evenly "false" :vexpand "false" :hexpand "false"
        (label :class "uphour" :halign "start" :wrap "true" :limit-width 25 :text UPHOUR)
        (label :class "upmin" :halign "start" :wrap "true" :limit-width 25 :text UPMIN)))))

;; Music
(defwidget music []
  (box :class "genwin" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
    ; (image :class "album_art" :path '${COVER}' :image-height 210 :image-width 210)
    (box :class "album_art" :vexpand "false" :hexpand "false" :style "background-image: url('${COVER}');")
    (box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
      (label :halign "center" :class "song" :wrap "true" :limit-width 30 :text SONG)
      (label :halign "center" :class "artist" :wrap "true" :limit-width 35 :text ARTIST)
      (box :orientation "h" :spacing 20 :halign "center" :space-evenly "true" :vexpand "false" :hexpand "false"
        (button :class "btn_prev" :timeout "3s" :onclick "scripts/music_info --prev" "󰒮")
        (button :class "btn_play" :timeout "3s" :onclick "scripts/music_info --toggle" STATUS)
        (button :class "btn_next" :timeout "3s" :onclick "scripts/music_info --next" "󰒭")
        (button :class "btn_next" :timeout "3s" :onclick "scripts/music_info  --ncmpcpp" "󰲹"))
      (box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false"
        (scale :min 0 :active "true" :max 100 :onchange "mpc seek {}%" :value CURRENT)))))

;; workspaces
(defwidget workspaces []
  (literal :content WORKSPACE :class "genwin")
)

;; mail
(defwidget mail []
  (box :class "genwin"
    (box :orientation "h" :halign "center" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
      (button :class "iconmail" :timeout "5s" :onclick "scripts/open_links --mail" "")
      (button :class "label_mails" :timeout "3m" :onclick "scripts/mails --reload" MAILS)
      (box :space-evenly "false" :vexpand "false" :hexpand "false"))))



;; netstat
(defwidget netstat []
  (box :class "genwin" :orientation "v" :vexpand "false" :hexpand "false" :space-evenly "false"
    (box :orientation "h" :space-evenly "false" :spacing 5
      (label :class "netstat" :style "margin: 25px 25px 0 30px" :text INTERFACE)
      (label :class "netstat" :text "󰜮")
      (label :class "netstat" :text {EWW_NET.wlan0.NET_DOWN})
      (label :class "netstat" :text "󰜷")
      (label :class "netstat" :text {EWW_NET.wlan0.NET_UP}))
    (box :orientation "h" :space-evenly "false"
    )))



;; weather
(defwidget weather []
  (box :class "genwin"
    (box :orientation "v" :spacing 10 :space-evenly "false" :vexpand "false" :hexpand "false"
      (box :orientation "h" :vexpand "false" :hexpand "false"
        (label :class "iconweather" :text ICON)
        (label :class "label_city" :text CITY)
        (button :class "label_temp" :timeout "1m" :onclick "scripts/weather_info --getdata" TEMP))
      (box :orientation "v" :spacing 10 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
        (label :class "label_stat" :text STAT)))))


;; distro
(defwidget distro []
  (box :class "genwin" :orientation "v" :vexpand "false" :hexpand "false" :space-evenly "false"
    (box :orientation "h"
      (label :class "distro" :text "Distro :  ")
      (label :class "distro" :text DISTRO))
    (box :orientation "h"
      (label :class "distro" :text "Kernel :  ")
      (label :class "distro" :text KERNEL))
    (box :orientation "h"
      (label :class "distro" :text "Hyprland :")
      (label :class "distro" :text HYPRLAND))
    (box :orientation "h"
      (label :class "distro" :text "Packages :")
      (label :class "distro" :text PACKAGES))))


;; Action buttons
(defwidget wifi []
  (box :class "genwin" :vexpand "false" :hexpand "false" :orientation "v" :space-evenly "false"
    (button :class "btn_wifi" :timeout "15s" :onclick "scripts/wifi --LIST" WLAN_ICON)
    (label :class "wifi_essid" :text WLAN_ESSID)))
(defwidget bluetooth []
  (box :class "genwin" :vexpand "false" :hexpand "false" :orientation "v" :space-evenly "false"
    (button :class "btn_bluetooth" :timeout "60s" :onclick "scripts/bluetooth" BLUETOOTH_ICON)
    (label :class "wifi_essid" :text BLUETOOTH)))
(defwidget vpn []
  (box :class "genwin" :vexpand "false" :hexpand "false" :orientation "v" :space-evenly "false"
    (button :class "btn_vpn" :onclick "scripts/vpn" VPN)
    (label :class "ip" :text LOCAL_IP)
    (label :class "ip" :style "margin:0;" :text IP)))
(defwidget kl []
  (box :class "genwin" :vexpand "false" :hexpand "false" :orientation "v" :space-evenly "false"
    (button :class "btn_kl" :onclick "hyprctl switchxkblayout at-translated-set-2-keyboard next && hyprctl switchxkblayout dell-kb216-wired-keyboard next" "")
    (label :class "kl" :text KL)))
(defwidget screensaver []
  (box :class "genwin" :vexpand "false" :hexpand "false"
    (button :class "btn_screensaver" :onclick "scripts/screensaver" SCREENSAVER)))
(defwidget dns []
  (box :class "genwin" :vexpand "false" :hexpand "false" :orientation "v" :space-evenly "false"
    (button :class "btn_dns" :timeout "15s" :onclick "scripts/dns" "")
    (label :class "dns" :text DNS)))

;; folders
(defwidget folders []
  (box :class "genwin" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
    (box :class "hddbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
      (box :space-evenly "false" :vexpand "false" :hexpand "false"
        (button :class "hddicon" :onclick "scripts/open_apps --fm" "")
        (label :class "fs_sep" :text "|"))
      (box :space-evenly "false" :vexpand "false" :hexpand "false"
        (label :class "hdd_label" :wrap "true" :limit-width 25 :text FREE)))
    (box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
      (button :class "iconfolder1" :timeout "5s" :onclick "scripts/open_folders --proj" "")
      (button :class "label_folder1" :timeout "5s" :onclick "scripts/open_folders --proj" "Projects"))
    (box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
      (button :class "iconfolder2" :timeout "5s" :onclick "scripts/open_folders --srv" "󱋣")
      (button :class "label_folder2" :timeout "5s" :onclick "scripts/open_folders --srv" "srv"))
    (box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
      (button :class "iconfolder3" :timeout "5s" :onclick "scripts/open_folders --music" "󱍙")
      (button :class "label_folder3" :timeout "5s" :onclick "scripts/open_folders --music" "Music"))
    (box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
      (button :class "iconfolder4" :timeout "5s" :onclick "scripts/open_folders --pics" "󰉏")
      (button :class "label_folder4" :timeout "5s" :onclick "scripts/open_folders --pics" "Pictures"))
    (box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
      (button :class "iconfolder5" :timeout "5s" :onclick "scripts/open_folders --cfg" "󱂀")
      (button :class "label_folder5" :timeout "5s" :onclick "scripts/open_folders --cfg" "~/.config"))
    (box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
      (button :class "iconfolder6" :timeout "5s" :onclick "scripts/open_folders --local" "󱂀")
      (button :class "label_folder6" :timeout "5s" :onclick "scripts/open_folders --local" "~/.local"))))


;; ** Windows *************************************************************************


;; background
(defwindow background :stacking "overlay" :focusable "false" :monitor 0 :screen 1
  :geometry (geometry :x 0 :y 0 :width "1920px" :height "1080px")
  (background))

;; system
(defwindow system :stacking "overlay" :focusable "false" :monitor 0 :screen 1
  :geometry (geometry :x 150 :y 150 :width 350 :height 440)
  (system))

;; todo
(defwindow todo :stacking "overlay" :focusable "false" :monitor 0 :screen 1
  :geometry (geometry :x 150 :y 605 :width 350 :height 325)
  (todo))

;; clock
(defwindow clock :stacking "overlay" :focusable "false" :monitor 0 :screen 1
  :geometry (geometry :x 515 :y 150 :width 350 :height 155)
  (clock))

;; uptime
(defwindow uptime :stacking "overlay" :focusable "false" :monitor 0 :screen 1
  :geometry (geometry :x 515 :y 320 :width 350 :height 155)
  (uptime))

;; music
(defwindow music :stacking "overlay" :focusable "false" :monitor 0 :screen 1
  :geometry (geometry :x 515 :y 490 :width 610 :height 280)
  (music))

;; workspaces
(defwindow workspaces :stacking "overlay" :focusable "false" :monitor 0 :screen 1
  :geometry (geometry :x 515 :y 785 :width 610 :height 145)
  (workspaces))

;; netstat
(defwindow netstat :stacking "overlay" :focusable "false" :monitor 0 :screen 1
  :geometry (geometry :x 880 :y 150 :width 380 :height 155)
  (netstat))

;; weather
(defwindow weather :stacking "overlay" :focusable "false" :monitor 0 :screen 1
  :geometry (geometry :x 880 :y 320 :width 380 :height 155)
  (weather))

;; distro
(defwindow distro :stacking "overlay" :focusable "false" :monitor 0 :screen 1
  :geometry (geometry :x 1140 :y 490 :width 290 :height 280)
  (distro))

;; mail
(defwindow mail :stacking "overlay" :focusable "false" :monitor 0 :screen 1
  :geometry (geometry :x 1140 :y 785 :width 290 :height 145)
  (mail))

;; vpn
(defwindow vpn :stacking "overlay" :focusable "false" :monitor 0 :screen 1
  :geometry (geometry :x 1445 :y 150 :width 155 :height 155)
  (vpn))

;; wifi
(defwindow wifi :stacking "overlay" :focusable "false" :monitor 0 :screen 1
  :geometry (geometry :x 1615 :y 150 :width 155 :height 155)
  (wifi))

;; kl
(defwindow kl :stacking "overlay" :focusable "false" :monitor 0 :screen 1
  :geometry (geometry :x 1445 :y 320 :width 155 :height 155)
  (kl))

;; bluetooth
(defwindow bluetooth :stacking "overlay" :focusable "false" :monitor 0 :screen 1
  :geometry (geometry :x 1615 :y 320 :width 155 :height 155)
  (bluetooth))

;; screensaver
(defwindow screensaver :stacking "overlay" :focusable "false" :monitor 0 :screen 1
  :geometry (geometry :x 1275 :y 320 :width 155 :height 155)
  (screensaver))

;; dns
(defwindow dns :stacking "overlay" :focusable "false" :monitor 0 :screen 1
  :geometry (geometry :x 1275 :y 150 :width 155 :height 155)
  (dns))

;; folders
(defwindow folders :stacking "overlay" :focusable "false" :monitor 0 :screen 1
  :geometry (geometry :x 1445 :y 490 :width 325 :height 440)
  (folders))
