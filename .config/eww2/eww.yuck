;; Variables
(defpoll time :interval "1s" "./scripts/datetime --time")
(defpoll date :interval "1s" "./scripts/datetime --date")
(defpoll screensaver_status :interval "1s" "./scripts/screensaver status")
(defpoll volume_percent :interval "3s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll brightness_percent :interval "5s" "brightnessctl -m -d intel_backlight | awk -F, '{print substr($4, 0, length($4)-1)}' | tr -d '%'")
(defpoll mic_percent :interval "3s" "amixer -D pulse sget Capture | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll kl :interval "1s" "./scripts/keyboard")
(defpoll vpn_status :interval "2s" "./scripts/vpn_status")
(defvar vol_reveal false)
(defvar br_reveal false)
(defvar music_reveal false)
(defvar wifi_rev false)
(defvar bt_rev false)
(defvar time_rev false)

(defpoll workspace :interval "0.4s" "scripts/workspace")

(defvar eww "/usr/bin/eww -c $HOME/.config/eww")

(deflisten bluetooth "~/.config/eww/scripts/bluetooth")

(defpoll COL_WLAN :interval "3s" "~/.config/eww/scripts/wifi --COL")
(defpoll ESSID_WLAN :interval "3s" "~/.config/eww/scripts/wifi --ESSID")
(defpoll WLAN_ICON :interval "3s" "~/.config/eww/scripts/wifi --ICON")


(defpoll song :interval "2s"  "~/.config/eww/scripts/music_info --song")
(defpoll song_artist :interval "2s"  "~/.config/eww/scripts/music_info --artist")
(defpoll current_status :interval "1s"  "~/.config/eww/scripts/music_info --time")
(defpoll song_status :interval "2s"  "~/.config/eww/scripts/music_info --status")
(defpoll cover_art :interval "2s"  "~/.config/eww/scripts/music_info --cover")

(defpoll calendar_day :interval "20h" "date '+%d'")
(defpoll calendar_year :interval "20h" "date '+%Y'")

;; widgets

(defwidget wifi []
  (box :vexpand "false" :hexpand "false" :space-evenly "false"
    (button
      :class "module-wif"
      :onclick "~/.config/eww/scripts/wifi_list"
      :wrap "false"
      :limit-width 12
      :style "color: ${COL_WLAN};"
      :tooltip ESSID_WLAN
    WLAN_ICON)
  ))


(defwidget bluetooth []
  (box :vexpand "false" :hexpand "false" :space-evenly "false"
    (button
      :class "bluetooth"
      :onclick "blueberry"
      :onrightclick "scripts/bluetooth toggle"
      :tooltip "${bluetooth.text} ${bluetooth.battery}"
      :style "color: ${bluetooth.color};"
    {bluetooth.icon})
    (revealer :transition "slideright"
      :reveal bt_rev
      :duration "350ms"
      (label    :class "module_bt_name"
        :text "${bluetooth.text} ${bluetooth.battery}"
        :orientation "h"
      ))))




(defwidget workspaces []
  (eventbox :cursor "pointer"
    (literal :content workspace))
)

(defwidget bat []
  (box :class "bat_module" :vexpand "false" :hexpand "false"
    (circular-progress :value {round(EWW_BATTERY.total_avg, 0)}
      :class "batbar"
      :thickness 4
      (button
        :class "iconbat"
        :limit-width 2
        :tooltip "battery on ${round(EWW_BATTERY.total_avg, 0)}%"
        :show_truncated false
        :onclick "$HOME/.config/eww/bar/scripts/pop system"
        :wrap false
      ""))))


(defwidget mem []
  (box :class "mem_module" :vexpand "false" :hexpand "false"
    (circular-progress :value {round(EWW_RAM.used_mem_perc, 0)}
      :class "membar"
      :thickness 4
      (button
        :class "iconmem"
        :limit-width 2
        :tooltip "${round(EWW_RAM.used_mem_perc, 0)}% Memory"
        :onclick "$HOME/.config/eww/scripts/pop system"
        :show_truncated false
        :wrap false
      ""))))

(defwidget storage []
  (box :class "storage_module" :vexpand "false" :hexpand "false"
    (circular-progress :value "${round(EWW_DISK["/"].used_perc, 0)}"
      :class "storagebar"
      :thickness 4
      (button
        :class "iconstorage"
        :limit-width 2
        :tooltip "${round(EWW_DISK["/"].used_perc, 0)}% SSD"
        :show_truncated false
        :wrap false
      ""))))


(defwidget cpu []
  (box :class "cpu_module" :vexpand "false" :hexpand "false"
    (circular-progress :value {round(EWW_CPU.avg, 0)}
      :class "cpubar"
      :thickness 4
      (button
        :class "iconcpu"
        :limit-width 2
        :tooltip "${round(EWW_CPU.avg, 0)}% CPU"
        :show_truncated false
        :wrap false
      ""))))


(defwidget vpn []
  (eventbox :cursor "pointer"
    (box :vexpand "false" :hexpand "false" :space-evenly "false" :tooltip {vpn_status=='󰯅' ? "Disconnected" : "Connected"}
      (button :class {vpn_status=='󰯅' ? "vpn-dis" : "vpn"} :onclick "~/.config/eww/scripts/vpn" vpn_status)
    )))


(defwidget screensaver []
  (eventbox :cursor "pointer"
    (box :vexpand "false" :hexpand "false" :space-evenly "false" :tooltip {screensaver_status=='󰾩' ? "Screensaver is enable" : "Screensaver is disable"}
      (button :class {screensaver_status=='󰾩' ? "screensaver" : "screensaver-dis"} :onclick "~/.config/eww/scripts/screensaver" screensaver_status)
    )))



(defwidget sep []
  (box :class "module-2" :vexpand "false" :hexpand "false"
    (label :class "separ" :text "|")))


(defwidget keyboard_layout []
  (box :class "module-2" :vexpand "false" :hexpand "false"
    (button :class "keyborad-layout" :onclick "hyprctl switchxkblayout at-translated-set-2-keyboard next && hyprctl switchxkblayout dell-kb216-wired-keyboard next" kl)
  ))


(defwidget datetime_module []
  (eventbox :onhover "${eww} update time_rev=true"
    :onhoverlost "${eww} update time_rev=false"
    (box :class "module" :space-evenly "false" :orientation "h" :spacing "3"
      (label :text time :class "time" )
      (revealer :transition "slideleft"
        :reveal time_rev
        :duration "350ms"
        (button :class "date"
          :onclick "$HOME/.config/eww/scripts/pop calendar" date
        )
      ))))

(defwidget volume []
  (eventbox :onhover "${eww} update vol_reveal=true"
    :onhoverlost "${eww} update vol_reveal=false"
    (box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3"
      (button   :onclick "scripts/pop audio"   :class "volume_icon" "")
      (revealer :transition "slideleft"
        :reveal vol_reveal
        :duration "350ms"
        (scale    :class "volbar"
          :value volume_percent
          :orientation "h"
          :tooltip "${volume_percent}%"
          :max 100
          :min 0
        :onchange "amixer -D pulse sset Master {}%" )))))

(defwidget bright []
  (eventbox :onhover "${eww} update br_reveal=true" :onhoverlost "${eww} update br_reveal=false"
    (box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3"
      (label :text "" :class "bright_icon" :tooltip "brightness")
      (revealer :transition "slideleft"
        :reveal br_reveal
        :duration "350ms"
        (scale    :class "brightbar"
          :value brightness_percent
          :orientation "h"
          :tooltip "${brightness_percent}%"
          :max 100
          :min 0
        :onchange "brightnessctl set {}%" )))))


;;  Music
(defwidget music []
  (eventbox :onhover "${eww} update music_reveal=true"
    :onhoverlost "${eww} update music_reveal=false"
    (box :class "module-2" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
      (box :class "song_cover_art" :vexpand "false" :hexpand "false" :style "background-image: url('${cover_art}');")
      (button :class "song" :wrap "true" :onclick "~/.config/eww/scripts/pop music" song)
      (revealer :transition "slideright"
        :reveal music_reveal
        :duration "350ms"
        (box :vexpand "false" :hexpand "false" :oreintation "h"
          (button :class "song_btn_prev" :onclick "~/.config/eww/scripts/music_info --prev" "")
          (button :class "song_btn_play" :onclick "~/.config/eww/scripts/music_info --toggle" song_status)
          (button :class "song_btn_next" :onclick "~/.config/eww/scripts/music_info --next" ""))))))



(defwidget right []
  (box :orientation "h"
    :space-evenly false
    :halign "end"
    :class "right_modules"
    (vpn)
    (screensaver)
    (bluetooth)
    (wifi)
    (sep)
    (volume)
    (bright)
    (sep)
    (cpu)
    (mem)
    (storage)
    (bat)
    (sep)
    (datetime_module)
    (keyboard_layout)))


(defwidget left []
  (box :orientation "h"
    :space-evenly false
    :halign "start"
    :class "left_modules"
    (workspaces)))


(defwidget center []
  (box :orientation "h"
    :space-evenly false
    :halign "center"
    :class "center_modules"
    (music)))

(defwidget bar_1 []
  (box :class "bar_class"
    :orientation "h"
    (left)
    (center)
    (right)
  ))

(defwindow bar
  :monitor 0
  :exclusive true
  :geometry (geometry :x "0%"
    :y "5px"
    :width "95%"
    :height "20px"
  :anchor "top center")
  :stacking "fg"
  :windowtype "dock"
  (bar_1))


(defwidget cal []
  (box :class "cal" :orientation "v"
    (box :class "cal-in"
      (calendar :class "cal"
        :day calendar_day
      :year calendar_year))))

(defwindow calendar :monitor 0
  :geometry (geometry :x "20px"
    :y "7%"
    :anchor "top right"
    :width "270px"
  :height "60px")
  (cal))



(defwidget audio []
  (box :class "audio-box" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
    (box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
      (box :class "speaker_icon" :orientation "v")
      (box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
        (label :class "speaker_text" :text "speaker" :valign "center" :halign "left" )
        (box :class "speaker_bar" :halign "center" :vexpand "false" :hexpand "false"
          (scale    :value volume_percent
            :space-evenly "false"
            :orientation "h"
            :onchange "amixer -D pulse sset Master {}%"
            :tooltip "volume on ${volume_percent}%"
            :max 100
          :min 0))))
    (label :text "" :class "audio_sep" :halign "center")
    (box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
      (box :class "mic_icon" :orientation "v")
      (box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
        (label :class "mic_text" :text "mic" :valign "center" :halign "left" )
        (box :class "mic_bar" :halign "center" :vexpand "false" :hexpand "false"
          (scale    :value mic_percent
            :space-evenly "false"
            :orientation "h"
            :tooltip "mic on ${mic_percent}%"
            :onchange "amixer -D pulse sset Capture {}%"
            :max 100
          :min 0))))))

(defwindow audio_ctl :monitor 0
  :geometry (geometry :x "20px"
    :y "7%"
    :anchor "top right"
    :width "280px"
  :height "60px")
  (audio))


;;  Music
(defwidget music_pop []
  (box :class "music_pop" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
    (box :class "music_cover_art" :vexpand "false" :hexpand "false" :style "background-image: url('${cover_art}');")
    (box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
      (label :halign "center" :class "music" :wrap "true" :limit-width 13 :text song)
      (label :halign "center" :class "music_artist" :wrap "true" :limit-width 15 :text song_artist)
      (box :orientation "h" :spacing 15 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
        (button :class "music_btn_prev" :onclick "~/.config/eww/scripts/music_info --prev" "")
        (button :class "music_btn_play" :onclick "~/.config/eww/scripts/music_info --toggle" song_status)
        (button :class "music_btn_next" :onclick "~/.config/eww/scripts/music_info --next" ""))
      (box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false" :space-evenly "false"
        (scale :onscroll "mpc -q seek {}" :min 0 :active "true" :max 100 :value current_status)))))


;;  music
(defwindow music_win :stacking "fg" :focusable "false" :monitor 0
  :geometry (geometry :x "0" :y "10px" :width 428 :height 104 :anchor "top center")
  (music_pop))



